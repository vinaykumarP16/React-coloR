{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","count","color","colorCode","colorArray","increment","bind","this","setState","prevState","console","log","prevProps","newColor","randomcolor","toUpperCase","className","style","backgroundColor","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAIqBA,E,kDACjB,aAAc,IAAD,8BACT,gBACKC,MAAM,CACPC,MAAM,EACNC,MAAM,GACNC,UAAU,QACVC,WAAW,IAEf,EAAKC,UAAU,EAAKA,UAAUC,KAAf,gBARN,E,6CAWb,WACIC,KAAKC,UAAS,SAAAC,GACV,MAAM,CACDR,MAAMQ,EAAUR,MAAM,Q,+BAMnC,WACIS,QAAQC,IAAI,a,gCAGhB,SAAmBC,EAAUH,GACzB,GAAGA,EAAUR,QAAUM,KAAKP,MAAMC,MAAM,CACpC,IAAMY,EAASC,MACfP,KAAKC,SAAS,CAACN,MAAMW,IACrBN,KAAKC,UAAS,SAAAC,GACV,MAAM,CACFN,UAAUU,EAASE,qB,oBASnC,WACI,OACI,sBAAKC,UAAU,MAAMC,MAAO,CAACC,gBAAgBX,KAAKP,MAAME,OAAxD,UAEG,oBAAIe,MAAO,CAACf,MAAMK,KAAKP,MAAME,OAA7B,SAAsCK,KAAKP,MAAMG,YACjD,wBAAQgB,QAASZ,KAAKF,UAAtB,gC,GA7CkBe,aCQlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.294af5b3.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport './App.css';\nimport randomcolor from 'randomcolor';\n\nexport default class App extends Component {\n    constructor(){\n        super()\n        this.state={\n            count:0,\n            color:'',\n            colorCode:'#0000',\n            colorArray:[]\n        }\n        this.increment=this.increment.bind(this);\n    }\n\n    increment(){\n        this.setState(prevState=>{\n            return{\n                 count:prevState.count+1\n            }\n        })\n    }\n\n\n    componentDidMount(){\n        console.log('mounted')\n    }\n\n    componentDidUpdate(prevProps,prevState){\n        if(prevState.count !== this.state.count){\n            const newColor=randomcolor()\n            this.setState({color:newColor}); \n            this.setState(prevState=>{\n                return{\n                    colorCode:newColor.toUpperCase()\n                }\n            })   \n        }\n        \n    }\n\n\n\n    render() {\n        return (\n            <div className='App' style={{backgroundColor:this.state.color}} >\n               {/*<h1 style={{color:this.state.color}}>{this.state.count}</h1>*/}\n               <h1 style={{color:this.state.color}}>{this.state.colorCode}</h1>\n               <button onClick={this.increment}> C O L O R </button>\n            </div>\n        );\n    }\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}